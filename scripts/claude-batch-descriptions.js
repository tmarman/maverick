#!/usr/bin/env node

/**
 * Generate feature descriptions one by one using direct Claude Code calls
 * This works around the spawn timeout issues
 */

const { promises: fs } = require('fs')
const path = require('path')

// Simple feature descriptions using the pattern that works
const featurePrompts = [
  {
    name: "Project Canvas & Work Item Management",
    prompt: "Describe this React feature in 2-3 sentences: Visual drag-and-drop project canvas with work item management using SimpleWorkItemCanvas component. Include 3 bullet points of key capabilities for organizing tasks across stages."
  },
  {
    name: "AI-Powered Work Item Analysis", 
    prompt: "Describe this AI feature in 2-3 sentences: Structured AI integration using Claude/Gemini APIs that analyzes user input and creates comprehensive work items with tasks, opportunities, and risks. Include 3 bullet points about JSON responses and multi-provider fallback."
  },
  {
    name: "GitHub Repository Integration",
    prompt: "Describe this GitHub feature in 2-3 sentences: Repository import system with OAuth, worktree management, and git-native project storage using GitHubRepositorySelector component. Include 3 bullet points about branch management and automation."
  },
  {
    name: "Project-Based Navigation & Routing",
    prompt: "Describe this Next.js feature in 2-3 sentences: Hierarchical project navigation with App Router, project-specific sidebars using ProjectSidebar component, and clean URLs. Include 3 bullet points about responsive design and state management."
  },
  {
    name: "Markdown-Based Work Item Storage",
    prompt: "Describe this storage feature in 2-3 sentences: Git-native architecture storing work items as markdown files with YAML frontmatter for version control. Include 3 bullet points about performance, portability, and indexing."
  }
]

async function generateBatchCommands() {
  console.log('📋 Generating Claude Code commands for batch execution...\n')
  
  const outputDir = path.join(process.cwd(), 'projects', 'maverick', 'ai-logs')
  await fs.mkdir(outputDir, { recursive: true })
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
  const commandsFile = path.join(outputDir, `claude-commands-${timestamp}.sh`)
  const resultsFile = path.join(outputDir, `feature-results-${timestamp}.md`)
  
  let commands = '#!/bin/bash\n\n'
  commands += '# Generated Claude Code commands for feature descriptions\n'
  commands += '# Run each command manually and copy the results\n\n'
  
  let resultsTemplate = '# Feature Descriptions Generated by Claude Code\n\n'
  resultsTemplate += `Generated: ${new Date().toISOString()}\n\n`
  
  featurePrompts.forEach((feature, index) => {
    commands += `echo "=== ${feature.name} ==="\n`
    commands += `claude -p "${feature.prompt}"\n`
    commands += `echo ""\n`
    commands += `echo "Press Enter to continue..."\n`
    commands += `read\n\n`
    
    resultsTemplate += `## ${index + 1}. ${feature.name}\n\n`
    resultsTemplate += `**Prompt:** ${feature.prompt}\n\n`
    resultsTemplate += `**Generated Description:**\n`
    resultsTemplate += `\`\`\`\n[Copy Claude Code output here]\n\`\`\`\n\n`
    resultsTemplate += `---\n\n`
  })
  
  await fs.writeFile(commandsFile, commands, 'utf-8')
  await fs.writeFile(resultsFile, resultsTemplate, 'utf-8')
  
  console.log(`📄 Commands file: ${commandsFile}`)
  console.log(`📝 Results template: ${resultsFile}`)
  console.log('\n🚀 To generate descriptions:')
  console.log('1. Run: chmod +x projects/maverick/ai-logs/claude-commands-*.sh')
  console.log('2. Run: ./projects/maverick/ai-logs/claude-commands-*.sh')
  console.log('3. Copy each Claude Code output to the results file')
  console.log('4. Run the update script to apply to work items')
  
  // Also generate individual commands for easy copy-paste
  console.log('\n📋 Individual Commands (copy-paste ready):')
  featurePrompts.forEach((feature, index) => {
    console.log(`\n${index + 1}. ${feature.name}:`)
    console.log(`claude -p "${feature.prompt}"`)
  })
  
  return { commandsFile, resultsFile }
}

async function createUpdateScript() {
  const updateScript = `#!/usr/bin/env node

/**
 * Update work items with manually collected Claude Code descriptions
 * Run this after collecting the descriptions manually
 */

const { promises: fs } = require('fs')
const path = require('path')

// Paste the Claude Code results here after running the commands
const featureDescriptions = {
  "Project Canvas & Work Item Management": \`[PASTE CLAUDE OUTPUT HERE]\`,
  "AI-Powered Work Item Analysis": \`[PASTE CLAUDE OUTPUT HERE]\`,
  "GitHub Repository Integration": \`[PASTE CLAUDE OUTPUT HERE]\`,
  "Project-Based Navigation & Routing": \`[PASTE CLAUDE OUTPUT HERE]\`,
  "Markdown-Based Work Item Storage": \`[PASTE CLAUDE OUTPUT HERE]\`
}

async function updateWorkItems() {
  console.log('📝 Updating work items with Claude Code descriptions...')
  
  const projectDir = path.join(process.cwd(), 'projects', 'maverick')
  const indexPath = path.join(projectDir, '.maverick.work-items.json')
  
  const indexContent = await fs.readFile(indexPath, 'utf-8')
  const index = JSON.parse(indexContent)
  
  let updatedCount = 0
  
  for (const [featureName, description] of Object.entries(featureDescriptions)) {
    if (description.includes('[PASTE CLAUDE OUTPUT HERE]')) {
      console.log(\`⏭️  Skipping \${featureName} - no description provided\`)
      continue
    }
    
    const workItem = index.items.find(item => item.title === featureName)
    if (!workItem) continue
    
    const filePath = path.join(projectDir, 'work-items', workItem.filename)
    
    try {
      let content = await fs.readFile(filePath, 'utf-8')
      
      // Update description section
      const descriptionRegex = /## 📋 Description\\n[\\s\\S]*?\\n\\n\\*\\*Original Feature Category:/
      content = content.replace(descriptionRegex, \`## 📋 Description\\n\${description}\\n\\n**Original Feature Category:\`)
      
      // Update timestamp
      const now = new Date().toISOString()
      content = content.replace(/^updatedAt: .*$/m, \`updatedAt: \${now}\`)
      
      await fs.writeFile(filePath, content, 'utf-8')
      
      console.log(\`✅ Updated: \${featureName}\`)
      updatedCount++
      
    } catch (error) {
      console.log(\`❌ Error updating \${featureName}: \${error.message}\`)
    }
  }
  
  if (updatedCount > 0) {
    index.lastUpdated = new Date().toISOString()
    await fs.writeFile(indexPath, JSON.stringify(index, null, 2), 'utf-8')
  }
  
  console.log(\`\\n🎉 Updated \${updatedCount} work items!\`)
}

updateWorkItems().catch(console.error)`

  const updateScriptPath = path.join(process.cwd(), 'scripts', 'update-with-claude-descriptions.js')
  await fs.writeFile(updateScriptPath, updateScript, 'utf-8')
  
  console.log(`\n🔧 Update script created: ${updateScriptPath}`)
  console.log('💡 Edit this script to paste in the Claude Code outputs, then run it')
}

async function main() {
  try {
    const { commandsFile, resultsFile } = await generateBatchCommands()
    await createUpdateScript()
    
    console.log('\n✨ Batch generation setup complete!')
    console.log('🎯 Next steps:')
    console.log('1. Run the individual Claude Code commands above')
    console.log('2. Paste results into scripts/update-with-claude-descriptions.js')
    console.log('3. Run the update script to apply to work items')
    
  } catch (error) {
    console.error('❌ Setup failed:', error)
  }
}

main().catch(console.error)